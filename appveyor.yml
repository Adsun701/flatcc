version: "win#{build}"

image: Visual Studio 2015

init:
  - git config --global core.autocrlf input

shallow_clone: true

clone_folder: c:\projects\flatcc

environment:
  # set to true or false or absent for default for tool
  parallel: false
  matrix:

   #- frontend: meson
   #  builder: ninja
   #  compiler: clang-cl
   #  toolchain: vs2015
   #  arch: x86

   #- frontend: meson
   #  builder: ninja
   #  compiler: cl
   #  toolchain: vs2010
   #  arch: x86

   #- frontend: meson
   #  builder: msbuild
   #  compiler: cl
   #  toolchain: vs2010
   #  arch: x86

   #- frontend: meson
   #  builder: msbuild
   #  compiler: cl
   #  toolchain: vs2015
   #  arch: x64

   #- frontend: meson
   #  builder: ninja
   #  compiler: cl
   #  toolchain: vs2015
   #  arch: x64

   #- frontend: cmake
   #  builder: msbuild
   #  compiler: cl
   #  toolchain: vs2017
   #  arch: x64
   #  APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017

   #- frontend: cmake
   #  builder: msbuild
   #  compiler: cl
   #  toolchain: vs2010
   #  arch: x86

   #- frontend: cmake
   #  builder: msbuild
   #  compiler: cl
   #  toolchain: vs2013
   #  arch: x86

   #- frontend: cmake
   #  builder: msbuild
   #  compiler: cl
   #  toolchain: vs2015
   #  arch: x86

    - frontend: cmake
      builder: msbuild
      compiler: cl
      toolchain: vs2015
      arch: x64

configuration:
  - debug
 #- release

install:
  # Install Meson
  - set PATH=C:\Python35\scripts;%PATH%
  - if %frontend%==meson pip3 install meson
  - if %frontend%==meson meson --version

  - if %configuration%==debug set CMAKE_BUILD_TYPE=Debug
  - if %configuration%==release set CMAKE_BUILD_TYPE=Release

  # Check CMake
  - if %frontend%==cmake cmake --version

  # Configure Visual Studio environment
  - if %toolchain%==vs2010 ( call "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" %arch% )
  - if %toolchain%==vs2013 ( call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" %arch% )
  - if %toolchain%==vs2015 ( call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %arch% )
  - if %toolchain%==vs2017 ( call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=%arch% )
  - msbuild /version

  # Configure clang-cl
  - if %compiler%==clang-cl set PATH="C:\Program Files\LLVM\bin";%PATH%
  - if %compiler%==clang-cl set CC=clang-cl
  - if %compiler%==clang-cl set CXX=clang-cl
  - if %compiler%==clang-cl clang-cl -v

  # Install Ninja Build
  - if %builder%==ninja set NINJA_URL="https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip"
  - if %builder%==ninja appveyor DownloadFile %NINJA_URL% -FileName ninja.zip
  - if %builder%==ninja 7z x ninja.zip -oC:\projects\deps\ninja > nul
  - if %builder%==ninja set PATH=C:\projects\deps\ninja;%PATH%
  - if %builder%==ninja ninja --version

skip_tags: true

matrix:
    fast_finish: true

before_build:
  - echo running build frontent
  - cd c:\projects\flatcc
  - mkdir build
  - cd build
  - echo configuring for %frontend%-%builder%-%arch%-%toolchain%-%compiler%
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x86-vs2010 cmake -G "Visual Studio 10 2010" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x64-vs2010 cmake -G "Visual Studio 10 2010 Win64" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x86-vs2013 cmake -G "Visual Studio 12 2013" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x64-vs2013 cmake -G "Visual Studio 12 2013 Win64" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x86-vs2015 cmake -G "Visual Studio 14 2015" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x64-vs2015 cmake -G "Visual Studio 14 2015 Win64" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x86-vs2017 cmake -G "Visual Studio 15 2017" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..
  - if %frontend%-%builder%-%arch%-%toolchain%==cmake-msbuild-x64-vs2017 cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..

  - if %builder%==msbuild set SOLUTION=c:\projects\flatcc\build\flatcc.sln
  - if %builder%-%parallel%==msbuild-true set MSBUILD_PARALLEL="/m'
  - if %builder%-%parallel%==ninja-false set NINJA_PARALLEL="-j 0"

  - if %frontend%-%builder%==cmake-ninja cmake -G "Ninja" -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DCMAKE_C_COMPILER="%compiler%" -DCMAKE_CXX_COMPILER="%compiler%" ..

  - if %frontend%-%builder%==meson-msbuild meson --backend=%toolchain% --buildtype=%configuration% ..
  - if %frontend%-%builder%==meson-ninja meson --buildtype=%configuration% ..

build_script:
  - echo running build
  - if %frontend%==cmake cmake --build . -- %MSBUILD_PARALLEL%
  - if %frontend%-%builder%=="meson-ninja" ninja %NINJA_PARALLEL%
  - if %frontend%-%builder%==meson-msbuild msbuild %MSBUILD_PARALLEL% /p:Configuration=%configuration% %SOLUTION% )

test_script:
  - echo running tests
  - if %frontend%==cmake ctest -C "%configuration%" -VV
  - if %frontend%==meson meson test
